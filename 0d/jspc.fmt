PseudoCode {

  main [toplevel+] = ‛«toplevel»’

  toplevel [x] = ‛«x»’

  FunctionDefinition [internal? kfunction name FormalParameters? Block] = 
    ‛\nfunction «name» («FormalParameters») {«Block»\n}’
  ProcedureDefinition [internal? kprocedure name FormalParameters? Block] =
    ‛\nfunction «name» («FormalParameters») {«Block»\n}’
  ConstructorDefinition [kconstructor name FormalParameters? States Tags Block] =
    ‛\nfunction «name» («FormalParameters») {«Block»\n}’

  States [klb stateDefinition* krb] = ‛’
  Tags [klb tagDefinition* krb] = ‛’

  Block [klb BlockStatement* krb] = ‛\n«BlockStatement»’

  BlockStatement [x] = ‛«x»’
    
  Statement_synonym [ksynonym name keq expr Block] = ‛\n{\nvar «name» = «expr»;\n«Block»\n}’
  Statement_constructorsynonym [selfFieldName keq expr] = ‛\n«selfFieldName» = «expr»;’
  Statement_block [x] = ‛\n{«x»}’
  Statement_selfStateDefinition [x] = ‛\nthis.state = «x»;’
  Statement_selfStateUpdate [x] =  ‛\nthis.state = «x»;’
  Statement_die [kdie x] = ‛\nthrow '«x»';’
  Statement_display [displayop Parameters] = ‛\nconsole.log («Parameters»);’
  Statement_forall [x] = ‛«x»’
  Statement_externRoutine [x] = ‛«x»’
  Statement_codeSnippet [x] = ‛«x»’
  Statement_expr [x] = ‛\n«x»;’

  ExternalRoutine [lang basicName Parameters? verbatim] = ‛\nfunction «basicName» («Parameters») {\n«verbatim»}’

  ForAll [forAllPrefix value tempVariableDefinition Block] = ‛\n«value».forAll («tempVariableDefinition» => {\n«Block»\n});’

  Parameters [klb operand* krb] = ‛«operand»’
  FormalParameters [klb parameterDefinition* krb] = ‛<<«parameterDefinition»>>’

  operand [x] = ‛«x»’
  expr [operand] = ‛«operand»’

  constant_message [x] = ‛«x»’
  constant_list [x] = ‛«x»’
  constant_objectlist [x] = ‛«x»’
  constant_state [x] = ‛«x»’
  constant_tag [x] = ‛«x»’
  constant_port [x] = ‛«x»’
  constant_string [x] = ‛«x»’

  value_funcall [x] = ‛«x»’
  value_instantiation [x] = ‛«x»’
  value_methodCall [x] = ‛«x»’
  value_fieldRef [x] = ‛«x»’
  value_parameterRef [x] = ‛«x»’
  value_functionRef [x] = ‛«x»’
  value_procedureRef [x] = ‛«x»’
  value_tempVariable [x] = ‛«x»’
  value_stateQuery [x] = ‛«x»’
  value_tagQuery [x] = ‛«x»’
  value_name [x] = ‛«x»’

  valueOperand [value] = ‛«value»’

  stateQuery [stateQ operand Block] = ‛???stateQuery «stateQ» «operand» { «Block» }???’
  tagQuery [tagQ operand Block] = ‛???tagQuery «tagQ» «operand» { «Block» }???’

  Funcall [callop operand Parameters?] = ‛«operand» («Parameters»)’

  ClassInstantiation [knew name Parameters?] = ‛«name» («Parameters»)’
  MethodCall [value call name Parameters?] = ‛«value».«name» («Parameters»)’
  ListOfObjects [ListHeader klb UnnamedObject+ krb] = ‛???ListOfObjects{«ListHeader»}[«UnnamedObject»]’
  ListHeader [headerOpen name+ headerClose] = ‛«name»’
  BasicList [klb expr* krb] = ‛[«expr»]’
  UnnamedObject [klb expr* krb] = ‛{«expr»}’
  Message_raw [messageBegin portOperand operand messageEnd] = ‛new Message ('«portOperand»', «operand», null, null)’
  Message_withDebug [messageBegin portOperand operand2 operand3 operand4 messageEnd] = ‛new Message ('«portOperand»', «operand2», «operand3», «operand4»)’


  portOperand [x] = ‛«x»’

  SelfStateDefinition [selfState keq expr] = ‛this.state = «expr»;’
  SelfStateUpdate [expr karrow selfState] = ‛this.state = «expr»;’
  selfFieldName [selfName kdot fieldName] = ‛this.«fieldName»’


  name_compoundName [s] = ‛«s»’
  name_keywordName [n] = ‛«n»’
  name_selfName [n] = ‛this’
  name_basicName [n] = ‛«n»’

  fieldName [nonSpecialName] = ‛«nonSpecialName»’

  port  [p] = ‛«p»’

  FieldRef [value kdot nonSpecialName] = ‛«value».«nonSpecialName»’
  selfState [selfName] = ‛«selfName»’
  parameterReference [krho nonSpecialName] = ‛«nonSpecialName»’
  parameterDefinition [parameterReference] = ‛«parameterReference»’
  functionReference [lambda nonSpecialName] = ‛«nonSpecialName»’
  procedureReference [proc nonSpecialName] = ‛«nonSpecialName»’
  
  compoundName [klb cs* krb] = ‛???jsmangle(«cs»)’
  basicName [nameFirst nameRest*] = ‛«nameFirst»«nameRest»’
  nonSpecialName [name] = ‛«name»’
  
  delimiter [c] = ‛’
  asciiBracket [c] = ‛’
  asciiCharacter [c] = ‛’
  unicodeBracket [c] = ‛’
  unicodeCharacter [c] = ‛’

  tempVariableDefinition [tempVariablePrefix nonSpecialName] = ‛«nonSpecialName»’
  tempVariableReference [tempVariablePrefix nonSpecialName] = ‛«nonSpecialName»’
  stateDefinition [statePrefix nonSpecialName] = ‛«nonSpecialName»’
  stateReference [statePrefix nonSpecialName] = ‛«nonSpecialName»’
  tagDefinition [tagPrefix nonSpecialName] = ‛«nonSpecialName»’
  tagReference [tagPrefix nonSpecialName] = ‛«nonSpecialName»’

  string [sq1 cs3* sq2] = ‛'«cs3»'’
  sq [c] = ‛’

  commentInnards_rec [klb cs2* krb] = ‛’
  commentInnards_flat [c] = ‛«c»’

  nameFirst [c] = ‛«c»’
  nameRest  [c] = ‛«c»’

  keywordName [x] = ‛«x»’
  codeSnippet [x] = ‛«x»’
  codeSnippetJS [snippetPrefix kjs spaces verbatim] = ‛«verbatim»’
  codeSnippetCL [snippetPrefix kjs spaces verbatim] = ‛’
  internal [keywordPrefix k] = ‛’
  clear [keywordPrefix k] = ‛’
  innerFunction [keywordPrefix k] = ‛’
  lang [keywordPrefix k] = ‛’
  tag [keywordPrefix k] = ‛’
  declare [keywordPrefix k] = ‛’
  callop [keywordPrefix k] = ‛’
  die [keywordPrefix k] = ‛’
  stateQ [keywordPrefix k] = ‛’
  tagQ [keywordPrefix k] = ‛’
  displayop [keywordPrefix call k] = ‛’
  yes [keywordPrefix k] = ‛true’
  no [keywordPrefix k] = ‛false’

  outport [k nonSpecialName] = ‛«nonSpecialName»’
  inport [k nonSpecialName] = ‛«nonSpecialName»’

  knew [k] = ‛’
  lambda [k] = ‛’
  proc [k] = ‛’
  call [k] = ‛’
  snippetPrefix [k] = ‛’
  keywordPrefix [k] = ‛’
  tagPrefix [k] = ‛’
  statePrefix [k] = ‛’
  selfName [k] = ‛’
  messageBegin [k] = ‛’
  messageEnd [k] = ‛’
  headerOpen [k] = ‛’
  headerClose [k] = ‛’
  nameBracket [k] = ‛’
  tempVariablePrefix [k] = ‛’
  forAllPrefix [k] = ‛’
  verbatimBegin [k] = ‛’
  verbatimEnd [k] = ‛’

  verbatim [verbatimBegin verbatimInnards+ verbatimEnd] = ‛«verbatimInnards»’
  verbatimInnards_switchGrammars [verbatimBegin expr verbatimEnd] = ‛«expr»’
  verbatimInnards_flat [c] = ‛«c»’

  spaces [ss*] = ‛ ’
  space [c] = ‛’
}
