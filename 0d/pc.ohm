PseudoCode {

  main = toplevel+

  toplevel =
    | applySyntactic<FunctionDefinition>
    | applySyntactic<ConstructorDefinition>
    | applySyntactic<Statement>

  FunctionDefinition = "function" name FormalParameters? Block
  ConstructorDefinition = "constructor" name FormalParameters? Block

  Block = "{" Statement+ "}"

  Statement =
    | "synonym" name "‚â£" expr Block -- synonym
    | Block -- block
    | SelfFieldDefinition -- selfFieldDefinition
    | SelfFieldUpdate -- selfFieldUpdate
    | expr -- expr

  ClassInstantiation = new name Parameters?
  Parameters = "(" expr* ")"
  FormalParameters = "(" parameterDefinition* ")"
  MethodCall = value call name Parameters?
  ListOfObjects = ListHeader "[" UnnamedObject+ "]"
  ListHeader = headerOpen name+ headerClose
  BasicList = "[" name* "]"
  UnnamedObject = "{" expr* "}"
  Message =
    | messageBegin port name name name messageEnd -- withDebug
    | messageBegin port name messageEnd -- raw

  expr =
    | applySyntactic<Message>
    | applySyntactic<ClassInstantiation>
    | applySyntactic<BasicList>
    | applySyntactic<ListOfObjects>
    | applySyntactic<FieldRef>
    | applySyntactic<MethodCall>
    | symbol
    | value

  value=
    | string
    | parameterReference
    | functionReference
    | name

  SelfFieldDefinition = selfField "‚â£" expr
  SelfFieldUpdate = expr "‚áí" selfField

  symbol = nonSpecialName "!"

  name =
    | compoundName
    | builtinName
    | selfName
    | basicName

  port = symbol | name
  FieldRef = value "." nonSpecialName
  selfField = selfName "." nonSpecialName
  parameterReference = "ùúå" nonSpecialName
  parameterDefinition = parameterReference
  functionReference = "Œª" nonSpecialName
  
  compoundName = "‚ù≤" (~nameBracket any)* "‚ù≥"
  basicName = nameFirst nameRest*
  nonSpecialName = ~selfName ~builtinName name
  
  delimiter = asciiBracket | asciiCharacter | unicodeBracket | unicodeCharacter
  asciiBracket = "(" | ")" | "{" | "}" | "[" | "]" | "<" | ">" 
  asciiCharacter = "!" | call | "." | builtinName
  call = "/"
  builtinName = "‚âà"
  selfName = "≈°"
  unicodeBracket = headerOpen | headerClose | messageBegin | messageEnd | nameBracket
  messageBegin = "‚ü™"
  messageEnd = "‚ü´"
  headerOpen = "‚é®"
  headerClose = "‚é¨"
  nameBracket = "‚ù≤" | "‚ù≥"
  unicodeCharacter = new
  new = "‚Üµ"

  string = sq (~sq any)* sq
  sq = "'"

  comment =  "/*" commentInnards* "*/" -- flat
  commentInnards =
    | "/*" commentInnards* "*/" -- rec
    | ~"/*" ~"*/" any -- flat

  nameFirst = letter
  nameRest = alnum | "_"

  space += comment
}
