PseudoCode {

  main = toplevel+

  toplevel =
    | applySyntactic<FunctionDefinition>
    | applySyntactic<ConstructorDefinition>
    | applySyntactic<Statement>

  FunctionDefinition = "function" name FormalParameters? Block
  ConstructorDefinition = "constructor" name FormalParameters? Block

  Block = 
    | "{" BlockStatement+ "}"

  BlockStatement =
    | FunctionDefinition
    | Statement
    
  Statement =
    | "synonym" name "‚â£" expr Block -- synonym
    | Block -- block
    | SelfFieldDefinition -- selfFieldDefinition
    | SelfFieldUpdate -- selfFieldUpdate
    | expr -- expr

  Parameters = "(" operand* ")"
  FormalParameters = "(" parameterDefinition* ")"

  operand = constant | value
  expr = operand

  constant =
    | applySyntactic<Message>
    | applySyntactic<BasicList>
    | applySyntactic<ListOfObjects>
    | string
    | symbol
    
  value =
    | applySyntactic<Funcall> -- funcall
    | applySyntactic<ClassInstantiation> -- instantiation
    | applySyntactic<MethodCall> -- methodCall
    | applySyntactic<FieldRef> -- fieldRef
    | parameterReference -- parameterRef
    | functionReference -- functionRef
    | else operand -- else
    | condOperand -- cond
    | name -- name

  valueOperand = value

  condOperand = cond operand applySyntactic<Block>

  Funcall = callop operand Parameters?

  ClassInstantiation = new name Parameters?
  MethodCall = value call name Parameters?
  ListOfObjects = ListHeader "[" UnnamedObject+ "]"
  ListHeader = headerOpen name+ headerClose
  BasicList = "[" name* "]"
  UnnamedObject = "{" expr* "}"
  Message =
    | messageBegin port operand operand operand messageEnd -- withDebug
    | messageBegin port operand messageEnd -- raw


  SelfFieldDefinition = selfField "‚â£" expr
  SelfFieldUpdate = expr "‚áí" selfField

  symbol = nonSpecialName "!"

  name =
    | compoundName
    | builtinName
    | selfName
    | basicName

  port = symbol | valueOperand

  FieldRef = value "." nonSpecialName
  selfField = selfName "." nonSpecialName
  parameterReference = "ùúå" nonSpecialName
  parameterDefinition = parameterReference
  functionReference = "Œª" nonSpecialName
  
  compoundName = "‚ù≤" (~nameBracket any)* "‚ù≥"
  basicName = nameFirst nameRest*
  nonSpecialName = ~selfName ~builtinName name
  
  delimiter = asciiBracket | asciiCharacter | unicodeBracket | unicodeCharacter
  asciiBracket = "(" | ")" | "{" | "}" | "[" | "]" | "<" | ">" 
  asciiCharacter = "!" | call | "." | builtinName
  call = "/"
  builtinName = "‚âà"
  selfName = "≈°"
  unicodeBracket = headerOpen | headerClose | messageBegin | messageEnd | nameBracket
  messageBegin = "‚ü™"
  messageEnd = "‚ü´"
  headerOpen = "‚é®"
  headerClose = "‚é¨"
  nameBracket = "‚ù≤" | "‚ù≥"
  unicodeCharacter = new
  new = "‚Üµ"

  string = sq (~sq any)* sq
  sq = "'"

  comment =  "/*" commentInnards* "*/" -- flat
  commentInnards =
    | "/*" commentInnards* "*/" -- rec
    | ~"/*" ~"*/" any -- flat

  nameFirst = letter
  nameRest = alnum | "_"

  callop = "‚âàcall"
  else = "‚âàelse"
  cond = "‚âàcond"

  space += comment
}
