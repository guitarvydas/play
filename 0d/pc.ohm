PseudoCode {

  main = toplevel+

  toplevel =
    | applySyntactic<FunctionDefinition>
    | applySyntactic<ConstructorDefinition>
    | applySyntactic<Statement>

  FunctionDefinition = "function" name FormalParameters? Block
  ConstructorDefinition = "constructor" name FormalParameters? Block

  Block = "{" Statement+ "}"

  Statement =
    | "synonym" name "≣" expr Block -- synonym
    | Block -- block
    | MethodCall -- call
    | expr -- expr

  ClassInstantiation = new name Parameters?
  Parameters = "(" expr* ")"
  FormalParameters = "(" name* ")"
  MethodCall = name call name Parameters?
  ListOfObjects = ListHeader "[" UnnamedObject+ "]"
  ListHeader = headerOpen name+ headerClose
  BasicList = "[" name* "]"
  UnnamedObject = "{" expr* "}"
  Message =
    | messageBegin port name name name messageEnd -- withDebug
    | messageBegin port name messageEnd -- raw

  expr =
    | applySyntactic<Message>
    | applySyntactic<ClassInstantiation>
    | string
    | applySyntactic<BasicList>
    | applySyntactic<ListOfObjects>
    | applySyntactic<FieldRef>
    | symbol
    | name
    
  symbol = name "!"

  name =
    | builtinName
    | basicName

  port = symbol | name
  FieldRef = name "." name
  
//  compoundName = "❲" (~nameBracket any)* "❳"
  basicName = nameFirst nameRest*
  
  delimiter = asciiBracket | asciiCharacter | unicodeBracket | unicodeCharacter
  asciiBracket = "(" | ")" | "{" | "}" | "[" | "]" | "<" | ">" 
  asciiCharacter = "!" | call | "." | builtinName
  call = "/"
  builtinName = "$"
  unicodeBracket = headerOpen | headerClose | messageBegin | messageEnd | nameBracket
  messageBegin = "⟪"
  messageEnd = "⟫"
  headerOpen = "⎨"
  headerClose = "⎬"
  nameBracket = "❲" | "❳"
  unicodeCharacter = new
  new = "↵"

  string = sq (~sq any)* sq
  sq = "'"

  comment =  "/*" commentInnards* "*/" -- flat
  commentInnards =
    | "/*" commentInnards* "*/" -- rec
    | ~"/*" ~"*/" any -- flat

  nameFirst = letter
  nameRest = alnum | "_"

  space += comment
}
