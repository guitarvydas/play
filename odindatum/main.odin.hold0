package zd

import "core:strings"
import "core:mem"
import "core:os"
import "core:fmt"

Datum :: struct {
    data: any,
}

new_datum_string :: proc (s : string) -> ^Datum {
    p := new (Datum)
    hs := new (string)
    hs^ = s
    p.data = hs
    fmt.println ("new_datum_string", p.data)
    return p
}

old_main :: proc () {
    d := new_datum_string ("fr/find.md")
    fmt.println (d)
    fmt.println (typeid_of (type_of (d)))
    fmt.println (typeid_of (type_of (d.data)))
    fmt.println (d.data)
    fmt.println ("inject B", d.data)
}

main :: proc (){
    cs := "TARVY"
    fmt.println (len (cs))
    fmt.println (raw_data (cs))
    fmt.println (&cs)
    clonedcs := strings.clone (cs)
    fmt.println (len (clonedcs))
    fmt.println (raw_data (clonedcs))
    fmt.println (&clonedcs)
}
